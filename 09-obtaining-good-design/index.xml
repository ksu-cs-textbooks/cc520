




	
	
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Obtaining Good Design on CC 520 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/</link>
    <description>Recent content in Obtaining Good Design on CC 520 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 10:53:05 -0500</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Database Design Principles</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/1-database-design-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/1-database-design-principles/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. And in this video, we&amp;rsquo;re going to be starting our discussion on what makes a database a good database. We&amp;rsquo;ve talked a lot about so far how we might make a SQL query to retrieve data. And later, we&amp;rsquo;ll also talk about SQL queries that we can use to actually insert and modify and delete data as well. But what makes a database design a good database.</description>
    </item>
    <item>
      <title>Database Design Example</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/2-database-design-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/2-database-design-example/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. And in this video, we&amp;rsquo;re going to be taking a look at an example database design. So we&amp;rsquo;ve shown some basic database, UML diagrams, but we really haven&amp;rsquo;t taken the time to draw our own yet. So in this example, we&amp;rsquo;re going to take a look at designing a really basic database for offering college courses on a campus like K State, a course is going to be defined by its number delivered by a department in a college and offered certain semesters at the same time on various days of the week.</description>
    </item>
    <item>
      <title>Obtaining Good Database Design</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/3-obtaining-good-db-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/3-obtaining-good-db-design/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. And in this video, we&amp;rsquo;re going to start taking a look at some of the fundamental database design theory, that makes a good design better. So we&amp;rsquo;ve already covered some things that centers are on, on what not to do with a database design, right? primarily centered around inconsistency with data and redundant information. We saw this with the university course example as well.</description>
    </item>
    <item>
      <title>Functional Dependencies</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/4-functional-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/4-functional-dependencies/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re gonna be talking about functional dependencies in regard to normal forms. But what is a functional dependency? Well, a functional dependency is a form of a database constraint. functional dependencies in general aren&amp;rsquo;t always defined as part of a physical constraint on your database or inside of a table, like a unique constraint, or a foreign key or a primary key.</description>
    </item>
    <item>
      <title>Functional Dependency Examples</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/5-fd-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/5-fd-examples/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re going to be taking a look at some examples of functional dependencies. So first we&amp;rsquo;ve talked about when a functional dependency may hold officially as part of a relation. So a functional dependency holds or doesn&amp;rsquo;t hold on an instance of a relation or table. If for all cases are all rows, and that functional dependency holds true, or we find a row, that&amp;rsquo;s where a row where that functional dependency does not hold true.</description>
    </item>
    <item>
      <title>Anomolies and Armstrong Rules</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/6-anomolies-armstrong-rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/6-anomolies-armstrong-rules/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. And in this video, we&amp;rsquo;re going to be taking a look at various ways of pulling out more functional dependencies. Inside of our relations. Particularly, we&amp;rsquo;re going to be focusing on how we can avoid anomalies and pulling more functional dependencies out using the Armstrong rules. So first off, what is an anomaly? Well, anomaly. An anomaly can be defined as essentially a bad functional dependency, and particularly where where a bad functional dependency holds based off of the current data that we have.</description>
    </item>
    <item>
      <title>Closure Sets</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/7-closure-sets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/7-closure-sets/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re going to get to our discussion on extracting more functional dependencies from our database. So before we ended on the Armstrong rules, which worked fairly well in pulling out more functional dependencies, but we found that it was a little bit tedious to actually do. And if we applied that to a much larger schema or much larger database becomes a little bit impractical and use.</description>
    </item>
    <item>
      <title>Super Keys</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/8-super-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/8-super-keys/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re gonna continue our discussions on how we might design a good database. So last time we talked about third normal form Boyce Codd Normal Form, and how those normal forms can be defined using functional dependencies, and keys. And in particular, we&amp;rsquo;ve spent a lot of time talking about functional dependencies and what that entails. And we also defined how you might calculate the closure sets, and how those closure sets could help us find all functional dependencies, along with some other techniques for finding those as well.</description>
    </item>
    <item>
      <title>BCNF Decomposition with Functional Depenencies</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/9-bcnf-decomp-fd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/9-bcnf-decomp-fd/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re going to be taking a look at how we might start improving our database design. And in particular, decomposing our tables trying to achieve Boyce Codd Normal Form. But first off, how do we use the information that we have now about Super keys to eliminate anomalies in our database design. So, one, one key fact that I&amp;rsquo;m going to try to hammer home here is that each attributes must provide a fact about the key, the whole key and nothing but the key.</description>
    </item>
    <item>
      <title>BCNF Decomposition with Closure Sets</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/10-bcnf-decomp-closure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/10-bcnf-decomp-closure/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re going to be taking a look at Boyce Codd Normal Form decomposition again. But instead of using functional dependencies for the basis of our decomposition, we&amp;rsquo;re going to use Closure sets. Now in general, I find closure closure sets to be a little bit more complicated to use for decomposition. So I typically lean on using functional dependencies as the basis for decomposing my tables and normalizing them.</description>
    </item>
    <item>
      <title>Lossless Decomposition</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/11-lossless-decomp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/11-lossless-decomp/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone, we&amp;rsquo;re going to continue our discussion on database normalization and obtaining good database design. So previously, what we&amp;rsquo;ve seen, we&amp;rsquo;ve talked about third normal form and Boyce Codd Normal Form, how we could calculate the functional dependencies and the super keys, and how we can use those to find that or how we can use those to decompose our relation to break it down into Boyce Codd Normal Form.</description>
    </item>
    <item>
      <title>Limitations of BCNF Decomposition</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/12-bcnf-decomp-limits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/12-bcnf-decomp-limits/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re going to be taking a look at some limitations behind decomposition using Boyce Codd Normal Form. So previously, we talked about how we, when we&amp;rsquo;re decomposing our tables, we need to be careful because if we&amp;rsquo;re not actually adhering to Boyce Codd Normal Form, and we&amp;rsquo;re decomposing our tables, ad hoc Li, we could actually have lossy decomposition, meaning we actually lose the original information, or at least, we lose, we don&amp;rsquo;t lose rows of data.</description>
    </item>
    <item>
      <title>Other Normal Forms</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/13-other-normal-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/13-other-normal-forms/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;ll be taking a look at other normal forms. So so far we&amp;rsquo;ve only we focused on primarily Boyce Codd Normal Form. And we&amp;rsquo;ve mentioned third normal form. But if you remember this image here, there&amp;rsquo;s a lot of other things that we could actually achieve here. So we have normal forms one through five, as well as Boyce Codd Normal form, which is somewhere here in the middle here.</description>
    </item>
    <item>
      <title>Third Normal Form vs BCNF</title>
      <link>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/14-third-vs-bcnf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc520-sql-server-textbook/09-obtaining-good-design/14-third-vs-bcnf/</guid>
      <description>YouTube Video Video Transcription Welcome back everyone. In this video, we&amp;rsquo;re going to be talking more about the third normal form. And so just read your reiterates our statement that we&amp;rsquo;ve seen, so far every non key attribute must provide a fact about the key the whole key and nothing but the key. This was famously famously done by William Kinte, who was the database researcher, but this really, really fills out our need for third normal form right we have any any non prime attributes must not be a functional dependency right if we have a non prime attribute that is a functional dependency or implies another column that is not the key, then we have an issue we need to split that out into its own table.</description>
    </item>
  </channel>
</rss>